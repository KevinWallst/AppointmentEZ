name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install --legacy-peer-deps

    - name: Run tests with summary
      shell: bash
      run: |
        # Disable exit on error
        set +e

        # Run tests with a script that always exits with code 0
        npm run test:github > test_output.log
        TEST_OUTPUT=$(cat test_output.log)
        echo "$TEST_OUTPUT"

        # Run timezone-specific tests
        echo "Running timezone-specific tests..."
        npm run test:timezone-github > timezone_output.log
        TIMEZONE_OUTPUT=$(cat timezone_output.log)
        echo "$TIMEZONE_OUTPUT"

        # Check if tests actually failed (not just exit code issues)
        if echo "$TEST_OUTPUT" | grep -q "FAIL " || echo "$TIMEZONE_OUTPUT" | grep -q "FAIL "; then
          echo "Tests failed!"
          TEST_FAILED=true
        else
          echo "All tests passed!"
          TEST_FAILED=false
        fi

        echo "## Test Summary Table" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| # | Test Suite | Purpose | Tests | Result | Failure Reason / Details |" >> $GITHUB_STEP_SUMMARY
        echo "|---|-----------|---------|-------|--------|--------------------------|" >> $GITHUB_STEP_SUMMARY

        # Process each test file
        count=1
        while IFS= read -r file; do
          # Extract the test file name
          filename=$(basename "$file")

          # Extract the purpose from the first describe block
          purpose=""
          while IFS= read -r line; do
            if [[ "$line" =~ describe\( ]]; then
              purpose=$(echo "$line" | sed 's/describe(//' | sed "s/'//g" | sed 's/"//g' | sed 's/,.*$//' | tr -d '\n')
              break
            fi
          done < "$file"

          if [ -z "$purpose" ]; then
            purpose="N/A"
          fi

          # Count the number of tests
          test_count=0
          while IFS= read -r line; do
            if [[ "$line" =~ test\( || "$line" =~ it\( ]]; then
              ((test_count++))
            fi
          done < "$file"

          # Check if the test file is in the failing tests from the output
          if echo "$TEST_OUTPUT" | grep -q "FAIL.*$filename"; then
            result="❌ FAIL"

            # Extract failure reason
            failure_reason=""
            capture=false
            while IFS= read -r line; do
              if [[ "$line" =~ FAIL.*$filename ]]; then
                capture=true
              elif [[ "$capture" == true && "$line" =~ Error: ]]; then
                failure_reason=$(echo "$line" | sed 's/Error: //' | tr -d '\n')
                break
              fi
            done < <(echo "$TEST_OUTPUT")

            if [ -z "$failure_reason" ]; then
              failure_reason="Unknown failure"
            fi
          else
            result="✅ PASS"
            failure_reason="N/A"
          fi

          # Add to the table
          echo "| $count | $filename | $purpose | $test_count | $result | $failure_reason |" >> $GITHUB_STEP_SUMMARY

          ((count++))
        done < <(find __tests__ -name "*.js" -o -name "*.ts" -o -name "*.tsx" | sort)

        # Add summary row
        total_files=0
        while IFS= read -r file; do
          ((total_files++))
        done < <(find __tests__ -name "*.js" -o -name "*.ts" -o -name "*.tsx")

        passing_files=0
        while IFS= read -r line; do
          if [[ "$line" =~ PASS ]]; then
            ((passing_files++))
          fi
        done < <(echo "$TEST_OUTPUT")

        failing_files=0
        while IFS= read -r line; do
          if [[ "$line" =~ FAIL ]]; then
            ((failing_files++))
          fi
        done < <(echo "$TEST_OUTPUT")

        # Extract total tests, passing tests, and failing tests using pure bash
        total_tests="Unknown"
        passing_tests="Unknown"
        failing_tests="Unknown"

        if [[ "$TEST_OUTPUT" =~ Tests:[[:space:]]*([0-9]+)[[:space:]]failed,[[:space:]]*([0-9]+)[[:space:]]passed,[[:space:]]*([0-9]+)[[:space:]]total ]]; then
          failing_tests="${BASH_REMATCH[1]}"
          passing_tests="${BASH_REMATCH[2]}"
          total_tests="${BASH_REMATCH[3]}"
        elif [[ "$TEST_OUTPUT" =~ Tests:[[:space:]]*([0-9]+)[[:space:]]passed,[[:space:]]*([0-9]+)[[:space:]]total ]]; then
          passing_tests="${BASH_REMATCH[1]}"
          total_tests="${BASH_REMATCH[2]}"
          failing_tests=0
        fi

        echo "| - | **SUMMARY** | **All Tests** | **$total_tests** | **$passing_files/$total_files PASS** | **$failing_tests failing, $passing_tests passing** |" >> $GITHUB_STEP_SUMMARY

        # Only fail the build if tests actually failed, not just if the process exited with code 1
        if [ "$TEST_FAILED" = true ]; then
          echo "Tests failed!"
          exit 1
        fi

        # Re-enable exit on error for the rest of the workflow
        set -e

    - name: Build (without version increment)
      run: node scripts/github-build.js
